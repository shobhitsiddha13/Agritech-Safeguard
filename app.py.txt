pip install Flask tensorflow requests
from flask import Flask, request, jsonify
from PIL import Image
import numpy as np
import tensorflow as tf

app = Flask(__name__)

# Load your pre-trained model
model = tf.keras.models.load_model('path/to/your/model.h5')

# Define a function to preprocess the image
def preprocess_image(image_path):
    img = Image.open(image_path)
    img = img.resize((224, 224))  # Adjust the size according to your model requirements
    img_array = np.array(img)
    img_array = img_array / 255.0  # Normalize pixel values
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    return img_array

# Define a route to classify the image
@app.route('/classify', methods=['POST'])
def classify_image():
    try:
        # Check if the request contains a file
        if 'file' not in request.files:
            return jsonify({'error': 'No file provided'})

        file = request.files['file']

        # Check if the file is empty
        if file.filename == '':
            return jsonify({'error': 'No file selected'})

        # Preprocess the image
        img_array = preprocess_image(file)

        # Make predictions
        predictions = model.predict(img_array)

        # Assuming the model outputs probabilities for each class, get the predicted class
        predicted_class = np.argmax(predictions[0])
        
        # Return the result
        result = {'class': predicted_class, 'probabilities': predictions[0].tolist()}
        return jsonify(result)

    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    app.run(port=5000)

